/*
 * Copyright (C) 2018, Jacques Van Damme.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include "tsio.h"
#include "vector"

using namespace tsio;

static size_t count = 0;

static const char* flagsCombo[] = {"",     " ",   " 0", " 0-", " 0-+", " 0-+#", " 0-#", " 0+",
                                   " 0+#", " 0#", " -", " -+", " -+#", " -#",   " +",   " +#",
                                   " #",   "0",   "0-", "0-+", "0-+#", "0-#",   "0+",   "0+#",
                                   "0#",   "-",   "-+", "-+#", "-#",   "+",     "+#",   "#"};

template <typename E, typename F, typename T>
void expect(const E& expected, const F& found, const T& value)
{
    if (expected != found) {
        std::cerr << "Expected '" << expected << "'; found '" << found << "' for value '" << value << "'."
                  << std::endl;
    }

    count++;
}

template <typename T>
void test(const T& value,
          const char* specs,
          int specNum1,
          int specNum2,
          int* dyn1 = nullptr,
          int* dyn2 = nullptr,
          const char* modifier = "")
{
    char buf[128];
    std::string text;
    std::string f;

    for (const char* pt = specs; *pt != 0; ++pt) {
        char spec = *pt;

        for (const auto& flag : flagsCombo) {
            f = "%";
            f += flag;

            if (dyn1 != nullptr) {
                f += '*';
            } else if (specNum1 >= 0) {
                f += std::to_string(specNum1);
            }

            if (dyn2 != nullptr) {
                f += ".*";
            } else if (specNum2 < 0) {
                if (specNum2 == -2) {
                    f += '.';
                }
            } else {
                f += '.';
                f += std::to_string(specNum2);
            }

            f += modifier;
            f += spec;

            std::string fmt('%' + f + "   \t\"" + f + "\".");
            const char* format = fmt.c_str();

            if (dyn1 != nullptr) {
                if (dyn2 != nullptr) {
                    sprintf(buf, format, *dyn1, *dyn2, value);
                    sprintf(text, format, *dyn1, *dyn2, value);
                } else {
                    sprintf(buf, format, *dyn1, value);
                    sprintf(text, format, *dyn1, value);
                }
            } else if (dyn2 != nullptr) {
                sprintf(buf, format, *dyn2, value);
                sprintf(text, format, *dyn2, value);
            } else {
                sprintf(buf, format, value);
                sprintf(text, format, value);
            }

            std::cout << buf << std::endl;

            expect(buf, text, value);
            count++;
        }
    }
}

void testStringIntegral()
{
    int intValues[] = {1234, -1234, 1, -1, 0, int(0x80000000)};
    int spec1s[] = {-1, 3, 15, 0};
    int spec2s[] = {-1, -2, 3, 0};

    for (auto spec1 : spec1s) {
        for (auto spec2 : spec2s) {
            for (auto value : intValues) {
                test(value, "diouxX", spec1, spec2);
            }

            test(0x8000000000000000ull, "diouxX", spec1, spec2, nullptr, nullptr, "ll");
            test('c', "cdiouxX", spec1, spec2);
            test(true, "diouxX", spec1, spec2);
            test(false, "diouxX", spec1, spec2);
        }
    }
}

void testStringFloatingPoint()
{
    double floatValues[] = {12.34, 987.0, 56e35, 0., 456.78, -456.78};
    int spec1s[] = {15, 0, -1};
    int spec2s[] = {3, 0, -1, -2};

    for (auto spec1 : spec1s) {
        for (auto spec2 : spec2s) {
            for (auto value : floatValues) {
                test(value, "aAfFeEgG", spec1, spec2);
            }
        }
    }
}

void testStringPointer()
{
    const char* t1 = "Another test";

    int spec1s[] = {15, 0, -1};
    int spec2s[] = {3, 0, -1, -2};

    for (auto spec1 : spec1s) {
        for (auto spec2 : spec2s) {
            test("The test", "s", spec1, spec2);
            test(t1, "diouxXs", spec1, spec2);
        }
    }
}

void testStringDynamics()
{
    int intValues[] = {1234, -1234, 1, -1, 0, int(0x80000000)};
    double floatValues[] = {1234.56, -1234.56, -1., 0.};
    int spec1s[] = {15, -15, 0};
    int spec2s[] = {3, 10, 0};

    for (auto spec1 : spec1s) {
        for (auto spec2 : spec2s) {
            for (auto value : intValues) {
                test(value, "diouxX", -1, spec2, &spec1, nullptr);
                test(value, "diouxX", spec1, -1, nullptr, &spec2);
                test(value, "diouxX", -1, -1, &spec1, &spec2);
            }

            for (auto value : floatValues) {
                test(value, "aAfFeEgG", -1, spec2, &spec1, nullptr);
                test(value, "aAfFeEgG", spec1, -1, nullptr, &spec2);
                test(value, "aAfFeEgG", -1, -1, &spec1, &spec2);
            }
        }
    }
}

void testPrintfN()
{
    std::string text;
    int iSize;
    int jSize;
    short sSize;
    char buf[30];

    sprintf(buf, "12345%n67890", &iSize);
    sprintf(text, "12345%n67890", &jSize);
    expect("1234567890", text, "");
    expect(iSize, jSize, "");

    sprintf(text, "12345678%n90", &sSize);
    expect("1234567890", text, "");
    expect(8, sSize, "");

    sprintf(text, "Hello ");
    addsprintf(text, "World%n!", &sSize);
    expect("Hello World!", text, "");
    expect(11, sSize, "");
}

void testPrintString()
{
    std::string text;
    std::string s = "abcde";

    sprintf(text, "%s", s);
    expect("abcde", text, "");
}

static void run()
{
    testStringIntegral();
    testStringFloatingPoint();
    testStringPointer();
    testStringDynamics();
    testPrintfN();
    testPrintString();
}

static void test()
{
    std::string text;

    sprintf(text, "t: '%.d'", 0);
}

static void examples()
{
    std::string str;
    short s = 123;
    int i = 42;
    float f = float(234.567);
    double d = 345.678;
    const char* ch = "Don't panic";

    short n1;
    int n2;

    sprintf(str, "%-15s,%n%12i,%d,%12.2f,%n%7.1E;%a", ch, &n1, s, i, f, &n2, d, d);

    std::cout << str << '\n';
    std::cout << "n1 = " << n1 << '\n';
    std::cout << "n2 = " << n2 << '\n';

    std::cout << fmt("%-15s") << ch << ',' << fmt("%12i") << s << ',' << fmt("d") << i << ',' << fmt("12.2f")
              << f << ',' << fmt("%7.1E") << d << ',' << fmt("a") << d << fmt() << '\n';

    std::cout << '\n';

    std::cout << fmt("-12.2f") << f << '\n';
    std::cout << std::setw(12) << std::setprecision(2) << std::left << std::fixed << f << '\n';
    std::cout << '\n';

    std::cout << fstring("%30s", ch) << '\n';
}

int main(int argc, char* argv[])
{
    test();

    long repeatCount = 1;

    if (argc > 1) {
        repeatCount = atol(argv[1]);
    }

    for (int i = 0; i < repeatCount; ++i) {
        run();
    }

    examples();

    fprintf(std::cout,
            "    %d sprintf tests executed in %4.2f seconds\n",
            count,
            double(clock() / double(CLOCKS_PER_SEC)));

    std::cout << "    " << fmt("%d") << count << " sprintf tests executed in " << fmt("4.2f")
              << double(clock() / double(CLOCKS_PER_SEC)) << " seconds\n";
}
